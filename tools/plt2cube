#!/usr/bin/env python

import os
import sys
import re
from optparse import OptionParser

import numpy as npy

from ase.io.cube import write_cube
from gpaw.cluster import Cluster
from gpaw.io.plt import read_plt

parser = OptionParser(usage='%prog plt structure',
                      version='%prog 0.1')
parser.add_option("-o", "--output", dest='cubefile', action='count',
                  default=None,
                  help='Name of the output cube file (default: derived from plt file)')
opt, args = parser.parse_args()
## print opt, args

if len(args) < 2:
    print 'Missing file names'
    sys.exit()

def getext(string):
    p = re.compile("\.")
    words = p.split(string)
    ext = words.pop()
    base = "".join("%s." % w for w in words)
    return ext, base

pltf, structf = args

print "# <plt2cube> reading plt file:",pltf
cell, grid, origin = read_plt(pltf)
##print "cell,shape,origin=", cell,grid.shape, origin

print "# <plt2cube> reading structure file:",structf
atoms = Cluster(filename=structf)
atoms.translate(-1. * npy.array(origin))
atoms.set_cell(cell, scale_atoms=False)
## Translate(atoms,tuple(-1.*num.array(origin)),'cartesian')
## atoms.SetUnitCell(cell,fix=True)

if opt.cubefile:
    ofname = opt.cubefile
else:
    ext, ofname = getext(pltf)
    ofname += "cube"
print "# <plt2cube> writing cube file:", ofname
write_cube(ofname, atoms, grid)

