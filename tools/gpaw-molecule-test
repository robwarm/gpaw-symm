#!/usr/bin/env python
# Emacs: treat this as -*- python -*-

import sys
from optparse import OptionParser

usage = '%prog [options] [molecules]'
version = '%prog 0.1'
description = 'Calculate atomization energies of small molecules.'

parser = OptionParser(usage=usage, version=version,
                      description=description)

parser.add_option('-v', '--vacuum', default=6.0, type='float',
                  metavar='<dist>',
                  help='space around atoms in Angstroms [default: %default]')
parser.add_option('-g', '--grid-spacing', default=.16, metavar='<h>',
                  type='float', dest='h',
                  help='grid spacing in Angstroms [default: %default]')
parser.add_option('--xc', default='PBE', type='string',
                  metavar='<xc>',
                  help='exchange correlaction functional [default: %default]')
parser.add_option('-s', '--setuptype', default='paw', type='string',
                  metavar='<setups>', dest='setups',
                  help='setup name')
parser.add_option('-e', '--eigensolver', default='rmm-diis',
                  metavar='<type>',
                  help='type of eigensolver [default: %default]')
parser.add_option('-b', '--basis', type='string',
                  metavar='<name>',
                  help='use specified basis')
parser.add_option('-X', '--exclude', action='store_true',
                  help='Calculate for all g2 molecules except selected ones')
#parser.add_option('-a', '--action', default='calculate',
#                  help=("Action to perform.  Must be one of 'calculate', "
#                        "'collect', or 'prettyprint.  Default: [%default]'"))
#parser.add_option('-E', '--calculate-energy', action='store_true',
#                  help='calculate atomization energies, store in .gpw files')
parser.add_option('-B', '--calculate-bonds', action='store_true',
                  help='calculate bond lengths, store in .traj files')
parser.add_option('-c', '--collect', action='store_true',
                  help='collect gpw or .traj file data in .csv files')
#parser.add_option('-f', '--fancy-output', action='store_true',
#                  help='write .rst tables from .csv files')
parser.add_option('-q', '--quick', action='store_true',
                  help='quick and dirty - equivalent to H=0.2, vacuum=4.0')
#parser.add_option('--clean', action='store_true',
#                  help='clean up files rather than performing action')
parser.add_option('--debug', action='store_true',
                  help='use gpaw-DEBUG mode')

opt, args = parser.parse_args()

from gpaw.testing.old_molecule_test import Test, molecules,\
    read_and_check_results, atomization_energies, bondlengths

h = opt.h
vacuum = opt.vacuum
if opt.quick:
    h = 0.2
    vacuum = 4.0

test = Test(vacuum=vacuum, h=h, xc=opt.xc, setups=opt.setups,
            eigensolver=opt.eigensolver, basis=opt.basis,
            calculate_dimer_bond_lengths=opt.calculate_bonds)

for formula in args:
    if not formula in molecules:
        print 'Formula not in G2:', formula
        sys.exit(-1)

if opt.exclude:
    formulas = [mol for mol in molecules if not mol in args]
else:
    formulas = args

if not opt.collect:
    if not formulas:
        print 'Nothing to do!'
    else:
        test.do_calculations(formulas)

if opt.collect:
    E, dE = read_and_check_results()
    Ea = atomization_energies(E)
    bondlengths(Ea, dE)
