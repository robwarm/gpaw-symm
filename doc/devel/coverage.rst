.. _coverage:

.. role:: rawhtml(raw)
   :format: html
   :class: special

=============
Code coverage
=============

The concept of code coverage indicates how much of the code base is probed
by running the :ref:`test suite <testsuite>`. A quantitative measurement
can be obtained by counting how many times each line of code is executed
throughout the process of running the tests, and we thus denote by *code
coverage* how many of the executable statements were run at least once.

.. toctree::
   :maxdepth: 1

   coverage/index

-----------------------------
Serial/parallel test coverage
-----------------------------
Test coverage information is generated by Python\'s Trace_ module with an
additional feature that allows the test suite to be run in parallel and
subsequently merges the information obtained about the code execution
in each thread.

.. _Trace: http://docs.python.org/library/trace.html

The obtained coverage information is pickled into a single file upon
completion of the test suite, and subsequent runs will merely add to
this information. To give a complete picture of which parts of the code
base are covered during the scheduled nightly runs, it is recommended
to incorporate both serial and parallel coverage information, which
can be obtained by running the following commands::

   $ gpaw-test --debug --coverage counts.pickle
   $ mpirun -np 2 gpaw-python gpaw-test --debug --coverage counts.pickle
   $ mpirun -np 4 gpaw-python gpaw-test --debug --coverage counts.pickle
   $ mpirun -np 8 gpaw-python gpaw-test --debug --coverage counts.pickle
   $ python -m trace --report --missing --file counts.pickle --coverdir coverage

To prevent excessive coverage generation, you can tell Trace_ to ignore all
non-essential modules by including their respective paths in the ``IGNOREPATHS``
environment variable. The last command converts the pickled coverage information
``counts.pickle`` into individual ``.cover`` files for each file in the GPAW
code base. You are now free to examine the obtained coverage information by
inspecting ``coverage/gpaw.*.cover``.

.. note::

   These files are clear text copies of the original code with a numerical
   prefix, which indicates how many times each executable statement was run.
   Lines marked by ``>>>>>>`` were not run.

.. include:: coverage/summary.txt

.. include:: coverage/ranking.txt
