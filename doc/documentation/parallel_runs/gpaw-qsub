#!/usr/bin/env python
# Emacs: treat this as -*- python -*-

import os
import optparse
import subprocess


parser = optparse.OptionParser()
add = parser.add_option

add('-l')
add('-q')

add('-n', '--threads', type=int, default=1)
add('-g', '--gpaw')
add('-x', '--export')

opts, args = parser.parse_args()

script = args[0]
name = script.split('/')[-1]

if opts.gpaw:
    path = opts.gpaw
else:
    path = os.environ.get('GPAW_HOME')
    if not path:
        import gpaw
        path = gpaw.__path__[0]
        
if opts.export:
    export = opts.export.split(',')
else:
    export = []
        
qsub = '#!/usr/bin/env python\n'
qsub += '#PBS -N %s\n' % name  # set default job name
qsub += '#PBS -W umask=002\n'

for line in open(script):
    if line.startswith('#PBS'):
        qsub += line

qsub += 'job = %r\n' % args
qsub += 'path = %r\n' % path
qsub += 'nthreads = %d\n' % opts.threads
qsub += 'export = %r\n' % export

qsub += """
import os
import subprocess

nodename = os.uname()[1]
c = nodename[0]
assert c in 'abcdghinmqp'

nproc = len(open(os.environ['PBS_NODEFILE']).readlines())

cmd = ['mpiexec']

export.append('PYTHONPATH=%s:%s' % (path, os.environ.get('PYTHONPATH', '')))

if c in 'ghi':
    # Intel Niflheim node:
    cmd += ['--mca', 'btl', '^tcp']

if nthreads > 1:
    cmd += ['-np', str(nproc // nthreads), '--loadbalance']
    export.append('OMP_NUM_THREADS=%d' % nthreads)

for x in export:
    cmd += ['-x', x]
    
cmd.append(os.path.join(path,
                        'build',
                        'bin.' + os.environ['GPAW_PLATFORM'],
                        'gpaw-python'))
cmd += job
print(cmd)
print subprocess.check_call(cmd)
"""

cmd = ['qsub']
if opts.l:
    cmd += ['-l', opts.l]
if opts.q:
    cmd += ['-q', opts.q]
subprocess.Popen(cmd, stdin=subprocess.PIPE).communicate(qsub)
